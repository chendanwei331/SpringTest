通过Spring和JDBC征服数据库
Spring的数据访问异常均继承自DataAccessException
DataAccessException的特殊之处在于他是一个非检查型异常。即，没有必要捕获Spring所抛出的异常。

一、配置数据源
无论选择Spring的那种数据访问方式，都需要配置一个数据源的引用。Spring提供了在Spring上下文中配置数据源bean的多种方式。
包括：
1、通过JDBC驱动程序定义的数据源
2、通过JNDI查找的数据源
3、连接池的数据源


通过JNDI查找的数据源
1、配置tomcat的JNDI资源：
在<GlobalNamingResources>元素下添加
    <Resource  
	    name="jdbc/mysql"   
	    scope="Shareable"   
	    type="javax.sql.DataSource"  
	    factory="org.apache.tomcat.dbcp.dbcp2.BasicDataSourceFactory"  
	    url="jdbc:mysql://xx.xxx.xx.xx:3306/test?zeroDateTimeBehavior=convertToNull"  
	    driverClassName ="com.mysql.jdbc.Driver"  
	    username="userName"  
	    password="password"  
	/>
	
2、在你项目的<Context>元素下添加
<ResourceLink global="jdbc/mysql" name="jdbc/mysql" type="javax.sql.DataSource" />

2、在项目中配置JNDI数据源：
	@Bean
	public JndiObjectFactoryBean dataSource(){
		JndiObjectFactoryBean jndiFB = new JndiObjectFactoryBean();
		jndiFB.setJndiName("jdbc/mysql");//tomcat中配置的JNDI资源名称
		jndiFB.setResourceRef(true);
		jndiFB.setProxyInterface(DataSource.class);//javax.sql.DataSource;
		return jndiFB;
	}
其中，jndiName属性用于指定JNDI中资源的名称。如果只是设置了jndiName属性，那么就会根据指定的名称查找数据源。
但是，如果程序运行在java应用服务器中，那么需要将resourceRef属性设置为true，这样给定的jndiName将会自动添加
"java:comp/env/"前缀。
如使用xml配置，则配置如下：
<jee:jndi-loop id="dataSource" jndi-name="jdbc/mysql" resource-ref="true"/>

<jee:jndi-loop>元素位于jee命名空间下

使用数据源连接池
	<!-- ========================================配置数据源1 druid.jar========================================= -->
	<!-- 配置数据源，使用的是alibaba的Druid(德鲁伊)数据源 -->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="20" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="200" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="5000" />
		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
	<!-- ========================================配置数据源2 HikariCP-java7.jar========================================= -->
	<!-- Hikari方式配置数据源-->
	<bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="url" value="${jdbc_url}" />
		<property name="username" value="${jdbc_username}" />
		<property name="password" value="${jdbc_password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="20" />
		<!-- 连接池最大使用连接数量 -->
		<property name="maxActive" value="200" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="0" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="5000" />
		<!-- <property name="poolPreparedStatements" value="true" /> <property 
			name="maxPoolPreparedStatementPerConnectionSize" value="33" /> -->
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="true" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="1800" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="true" />
		<!-- 监控数据库 -->
		<!-- <property name="filters" value="stat" /> -->
		<property name="filters" value="mergeStat" />
	</bean>
	
使用对象-关系映射持久化数据
Spring对多个持久化框架都提供了支持，包括Hibernate,mybatis,JDO及JPA等。Spring对ORM框架的支持
提供了这些框架的集成点以及一些附加的服务
1、支持集成Spring声明式事务；
2、透明的异常处理
3、线程安全的、轻量级的模板类
4、DTO支持类
5、资源管理

一、在Spring中集成hibernate

