Spring 远程调用过程
Spring通过多种远程调用技术支持RPC

远程方法调用（RMI）：不考虑网络限制时（例如防火墙），访问/发布基于java的服务；
Hession或Burlap：考虑网络限制时，通过HTTP访问/发布基于java的服务。Hessian是二进制协议，而Burlap是基于XML的；
HTTP invoker：考虑网络限制时，并希望使用基于xml或专有的序列化机制实现java序列化时，访问/发布基于Spring的服务；
JAX-RPC或JAX-WS：访问/发布平台独立的、基于SOAP的Web服务；


在客户端代理JAX-WS服务--项目实例
配置：
<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jaxws="http://cxf.apache.org/jaxws"
	xsi:schemaLocation=" http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://cxf.apache.org/jaxws http://cxf.apache.org/schema/jaxws.xsd">
	<bean id="smbService" class="com.cannal.core.wsclient.service.smb.IISmbService"
		factory-bean="clientFactory" factory-method="create" />
	<bean id="clientFactory" class="org.apache.cxf.jaxws.JaxWsProxyFactoryBean">
		<property name="serviceClass" value="com.cannal.core.wsclient.service.smb.IISmbService" />
		<property name="address" value="${smbService_url}" />
	</bean>
</beans>

IISmbService：接口
@WebService(name = "SmbService", targetNamespace = "http://xxxx.cm/smb/")
@SOAPBinding(style = SOAPBinding.Style.RPC)
public interface IISmbService {
	
	public static final Logger logger = LogManager.getLogger("erp");
	
	/**
	 * 
	 * 将对象转化为xml字符串并加密
	 * @Title: convertAndEncrypt
	 * @param obj
	 * @return
	 * @throws Exception
	 * @throws
	 */
	static String convertAndEncrypt(Object obj) throws Exception{
		String xml = JaxbXmlUtils.convertToXml(obj);
		logger.info("----------sendToERPxml-------"+xml);
		return DesEncrypterUtils.encrypt(xml, ERPWebServiceTools.ERP_KEY);
	}
	
	/**
	 * 
	 * 将返回的字符串解密并转化为对象
	 * @Title: decryptAndConvert
	 * @param xml
	 * @return
	 * @throws Exception
	 * @throws
	 */
	static ERPReturnDomain decryptAndConvert(String xml) throws Exception{
		String result = DesEncrypterUtils.decrypt(xml, ERPWebServiceTools.ERP_KEY);
		ERPReturnDomain obj = (ERPReturnDomain)JaxbXmlUtils.convertToObject(ERPReturnDomain.class, result);
		if(null!=obj){
			logger.info("----------ERP return domin：return code{},return message{}",obj.getCode(),obj.getMsg());
		}
		return obj;
	}
	
	/**
	 * 
	 * 将返回的字符串解密并转化为对象
	 * @Title: decryptAndConvert
	 * @param xml
	 * @return
	 * @throws Exception
	 * @throws
	 */
	static ERPReturnPresentDomain decryptAndConvertPresents(String xml) throws Exception{
		String result = DesEncrypterUtils.decrypt(xml, ERPWebServiceTools.ERP_KEY);
		ERPReturnPresentDomain obj = (ERPReturnPresentDomain)JaxbXmlUtils.convertToObject(ERPReturnPresentDomain.class, result);
		logger.info("----get my present------ERPresult-------"+result);
		return obj;
	}
	/**
	 * 
	 * @param xml
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "SetRMSFBM")
	@WebResult(partName = "return")
	public String setRMSFBM(@WebParam(name = "Xml", partName = "Xml")String xml);
	
	/**
	 * 
	 * @param xml
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "SetRMSFBLLock")
	@WebResult(partName = "return")
	public String setRMSFBLLock(@WebParam(name = "Xml", partName = "Xml")
	String xml);
	
	/**
	 * 
	 * @param xml
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "CancelRMSFBM")
	@WebResult(partName = "return")
	public String cancelRMSFBM(@WebParam(name = "Xml", partName = "Xml")
	String xml);
	
	/**
	 * 
	 * @param xml
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "SearchRMSFBL")
	@WebResult(partName = "return")
	public String searchRMSFBL(@WebParam(name = "Xml", partName = "Xml")
	String xml);
	
	/**
	 * 
	 * @param xml
	 * @return returns java.lang.String
	 */
	@WebMethod(operationName = "SetRMSFBA")
	@WebResult(partName = "return")
	public String setRMSFBA(@WebParam(name = "Xml", partName = "Xml")
	String xml);
}

